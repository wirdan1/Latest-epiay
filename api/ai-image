// PLUGIN: DeepFakeMaker Converter
// TYPE: CJS

const axios = require("axios");
const crypto = require("crypto");
const fs = require("fs");

/**
 * AuthGenerator Class
 * - Menghasilkan data autentikasi (app_id, t, nonce, sign, secret_key)
 * - Kombinasi RSA Public Encrypt dan AES-CBC
 */
class AuthGenerator {
  static #PUBLIC_KEY = `-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDa2oPxMZe71V4dw2r8rHWt59gH
W5INRmlhepe6GUanrHykqKdlIB4kcJiu8dHC/FJeppOXVoKz82pvwZCmSUrF/1yr
rnmUDjqUefDu8myjhcbio6CnG5TtQfwN2pz3g6yHkLgp8cFfyPSWwyOCMMMsTU9s
snOjvdDb4wiZI8x3UwIDAQAB
-----END PUBLIC KEY-----`;
  static #S = "NHGNy5YFz7HeFb";

  constructor(appId) {
    this.appId = appId;
  }

  aesEncrypt(data, key, iv) {
    const keyBuffer = Buffer.from(key, "utf8");
    const ivBuffer = Buffer.from(iv, "utf8");
    const cipher = crypto.createCipheriv("aes-128-cbc", keyBuffer, ivBuffer);
    let encrypted = cipher.update(data, "utf8", "base64");
    encrypted += cipher.final("base64");
    return encrypted;
  }

  generateRandomString(length) {
    const chars =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const randomBytes = crypto.randomBytes(length);
    let result = "";
    for (let i = 0; i < length; i++) {
      result += chars.charAt(randomBytes[i] % chars.length);
    }
    return result;
  }

  generate() {
    const t = Math.floor(Date.now() / 1000).toString();
    const nonce = crypto.randomUUID();
    const tempAesKey = this.generateRandomString(16);

    const encryptedData = crypto.publicEncrypt(
      {
        key: AuthGenerator.#PUBLIC_KEY,
        padding: crypto.constants.RSA_PKCS1_PADDING,
      },
      Buffer.from(tempAesKey)
    );
    const secret_key = encryptedData.toString("base64");

    const dataToSign = `${this.appId}:${AuthGenerator.#S}:${t}:${nonce}:${secret_key}`;
    const sign = this.aesEncrypt(dataToSign, tempAesKey, tempAesKey);

    return {
      app_id: this.appId,
      t,
      nonce,
      sign,
      secret_key,
    };
  }
}

/**
 * convert(buffer, prompt)
 * - Upload gambar ke DeepFakeMaker.io
 * - Buat task konversi AI
 * - Polling hingga hasil (generate_url) tersedia
 */
async function convert(buffer, prompt) {
  try {
    const auth = new AuthGenerator("ai_df");
    const authData = auth.generate();
    const userId = auth.generateRandomString(64).toLowerCase();

    const headers = {
      "Access-Control-Allow-Credentials": "true",
      "Content-Type": "application/json",
      "User-Agent":
        "Mozilla/5.0 (Android 15; Mobile; SM-F958; rv:130.0) Gecko/130.0 Firefox/130.0",
      Referer: "https://deepfakemaker.io/nano-banana-ai/",
    };

    const instance = axios.create({
      baseURL: "https://apiv1.deepfakemaker.io/api",
      params: authData,
      headers,
    });

    // 1️⃣ Upload Sign Request
    const file = await instance
      .post("/user/v2/upload-sign", {
        filename:
          auth.generateRandomString(32) + "_" + Date.now() + ".jpg",
        hash: crypto.createHash("sha256").update(buffer).digest("hex"),
        user_id: userId,
      })
      .then((i) => i.data);

    // 2️⃣ Upload file ke URL yang diterima
    await axios.put(file.data.url, buffer, {
      headers: {
        "content-type": "image/jpeg",
        "content-length": buffer.length,
      },
    });

    // 3️⃣ Buat task konversi
    const taskData = await instance
      .post("/replicate/v1/free/nano/banana/task", {
        prompt: prompt,
        platform: "nano_banana",
        images: ["https://cdn.deepfakemaker.io/" + file.data.object_name],
        output_format: "png",
        user_id: userId,
      })
      .then((i) => i.data);

    // 4️⃣ Polling hingga task selesai
    const progress = await new Promise((resolve, reject) => {
      let retries = 25;
      const interval = setInterval(async () => {
        try {
          const xz = await instance
            .get("/replicate/v1/free/nano/banana/task", {
              params: {
                user_id: userId,
                ...taskData.data,
              },
            })
            .then((i) => i.data);

          if (xz.msg === "success") {
            clearInterval(interval);
            resolve(xz.data.generate_url);
          }

          if (--retries <= 0) {
            clearInterval(interval);
            reject(new Error("Timeout: Failed to get task result."));
          }
        } catch (err) {
          clearInterval(interval);
          reject(err);
        }
      }, 2500);
    });

    return progress;
  } catch (error) {
    throw new Error(error.message);
  }
}

// --- Plugin Export ---
module.exports = {
  name: "DeepFakeMaker Converter",
  desc: "Konversi foto menjadi gambar AI dengan DeepFakeMaker.io Nano Banana model.",
  category: "Aiimage",
  params: ["file", "prompt"],
  async run(req, res) {
    try {
      let buffer;
      const prompt =
        req.body?.prompt || req.query.prompt || "Convert this photo into a digital artwork.";

      // dukung upload file atau url
      if (req.files && req.files.file) {
        buffer = req.files.file.data;
      } else if (req.query.url) {
        const resp = await axios.get(req.query.url, {
          responseType: "arraybuffer",
        });
        buffer = Buffer.from(resp.data);
      } else {
        return res.status(400).json({
          status: false,
          error: "Harus upload file atau sertakan ?url=https://...",
        });
      }

      const resultUrl = await convert(buffer, prompt);

      // ambil hasil (buffer)
      const videoResp = await axios.get(resultUrl, {
        responseType: "arraybuffer",
      });

      res.setHeader("Content-Type", "image/png");
      res.setHeader(
        "Content-Disposition",
        `inline; filename="deepfakemaker_${Date.now()}.png"`
      );
      return res.end(videoResp.data);
    } catch (err) {
      console.error("DeepFakeMaker Error:", err);
      return res.status(500).json({
        status: false,
        error: "Gagal memproses permintaan",
        message: err.message,
      });
    }
  },
};
